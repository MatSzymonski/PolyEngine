set(GAME_INCLUDE Src)

file(GLOB_RECURSE GAME_SRCS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} 
	${GAME_INCLUDE}/*.cpp 
	${GAME_INCLUDE}/*.hpp
	${GAME_INCLUDE}/*.h)
GenerateSourceGoups("${GAME_SRCS}")

set(GAME_TARGET $PROJECT_NAME$)

add_library(${GAME_TARGET} SHARED ${GAME_SRCS})
target_compile_definitions(${GAME_TARGET} PRIVATE _GAME)
target_include_directories(${GAME_TARGET} PRIVATE ${GAME_INCLUDE})
target_link_libraries(${GAME_TARGET} PRIVATE ${API_TARGET} ${ENGINE_TARGET} ${CORE_TARGET})
#add_dependencies(${GAME_TARGET} ${STANDALONE_TARGET} ${GLDEVICE_TARGET} ${EDITOR_TARGET})
add_dependencies(${GAME_TARGET} ${STANDALONE_TARGET} ${VKDEVICE_TARGET} ${EDITOR_TARGET})

#note(vuko): we can't use configure_file() directly because there is no reliable way to get an output artifact location at configure-time
find_file(CMAKE_TEMPLATE_PROCESSOR_SCRIPT process_template.cmake  PATHS ${CMAKE_MODULE_PATH}  NO_DEFAULT_PATH)

# Create config file for out game
add_custom_command(
	TARGET ${GAME_TARGET}
	POST_BUILD
	COMMAND "${CMAKE_COMMAND}"
	        -DINPUT_FILE="$<TARGET_PROPERTY:${ENGINE_TARGET},SOURCE_DIR>/AssetsPathConfig.json.in"
	        -DOUTPUT_FILE="${DIST_DIR}/${BUILD_CONFIG_NAME}/AssetsPathConfig.json"
	        -DENGINE_ASSETS_PATHS="$<TARGET_PROPERTY:${ENGINE_TARGET},SOURCE_DIR>/Res/"
			-DGAME_ASSETS_PATHS="$<TARGET_PROPERTY:${GAME_TARGET},SOURCE_DIR>/Res/"
			#-DRENDERING_DEVICE_LIB_PATH="./$<TARGET_FILE_NAME:${GLDEVICE_TARGET}>"
			-DRENDERING_DEVICE_LIB_PATH="./$<TARGET_FILE_NAME:${VKDEVICE_TARGET}>"
			-DGAME_LIB_PATH="./$<TARGET_FILE_NAME:${GAME_TARGET}>"
	        -P "${CMAKE_TEMPLATE_PROCESSOR_SCRIPT}"
)

cotire(${GAME_TARGET})